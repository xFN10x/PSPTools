/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    //`cpp-application`
    id("io.github.krakowski.jextract") version "0.4.1"
    id("org.panteleyev.jpackageplugin") version "1.7.3"
     id("com.gradleup.shadow") version "8.3.9"
}


repositories {

    mavenCentral()

}

tasks.jextract {
    toolchain.set("C:/jextract-21")
        // The header file from which we want to generate the bindings
	header("${project.projectDir}/native-c/include/apollo.h") {
	// The library name (don't worry about this for now)
	libraries.set(listOf("apolloLib"))
        // The package under which all source files will be generated
        targetPackage = "org.apolloLib"
        // The generated class name
        className = "ApolloLib"
        }
}

dependencies {
    implementation("com.formdev:flatlaf:3.6")
    implementation("com.google.code.gson:gson:2.13.1")
    implementation("com.google.guava:guava:33.4.8-jre")
    implementation("net.lingala.zip4j:zip4j:2.11.5")
    implementation("commons-io:commons-io:2.20.0")
    //implementation("org.bolet.jgz:jgz:0.2")
    //implementation(project(":common"))
    //implementation( project(":native-c"))
    // https://mvnrepository.com/artifact/com.palantir.isofilereader/isofilereader
    implementation("com.palantir.isofilereader:isofilereader:0.6.1")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

application {
    // Define the main class for the application.
    mainClass = "psptools.App"
    //applicationDefaultJvmArgs = listOf("-Djava.library.path=" + file("${buildDir}/libs/ApolloLib/shared").absolutePath, "--enable-preview")
}


var version = "1.0"
var winver = "1.0.0"


tasks.register<Copy>("copyNativeLibs") {
    // Make sure native project is built first
    dependsOn(":native-c:assemble")

    // Where Gradle stores the native build outputs (adjust path if needed)
    from(fileTree("${project(":native-c").buildDir}/libs/native-c/shared") {
        include("*.dll", "*.so", "*.dylib")
    })

    // Put them in your main resources folder inside the build
    into("$buildDir/resources/main")
}

// Ensure resources include the copied native libs
tasks.named<ProcessResources>("processResources") {
    dependsOn("copyNativeLibs")
}

tasks.jpackage {
    dependsOn("build", "shadowJar")

    input = layout.buildDirectory.dir("builtJars")
    destination = layout.buildDirectory.dir("builtDist")
    appVersion = winver

    appName = "File2Img"
    vendor = "_FN10_"

    icon = file("src/main/resources/icon.png")


    type = org.panteleyev.jpackage.ImageType.APP_IMAGE

    mainJar = "File2Img-$version-all.jar"
    mainClass = "file2image.App"

    windows {
        //type = org.panteleyev.jpackage.ImageType.EXE
        //winConsole = true
    }

    linux {
        //type = org.panteleyev.jpackage.ImageType.DEB
        linuxPackageName = "File2Img"
        linuxShortcut = true
    }
}

tasks.shadowJar {
    archiveBaseName.set("File2Img")
    archiveVersion.set(version)
    destinationDirectory.set(layout.buildDirectory.dir("builtJars"))
}